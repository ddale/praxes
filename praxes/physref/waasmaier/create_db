#!/usr/bin/env python
'''
This script creates an SQLite3 database of parameters to calculate the
energy-independent atomic form factors (f_0) as compiled by D. Waasmaier and
A. Kirfel and published in Acta Cryst vA51, p416 (1995).
'''

import io
import json
import os
import sqlite3
import sys


def process_waasmaierdb(data, root):
    if os.path.isfile(os.path.join(root, 'waasmaierdb.h5')):
        return

    try:
        archive = tarfile.open(data)
        lines = archive.extractfile(archive.getnames()[0]).readlines()[19:]
    finally:
        archive.close()

    with h5py.File(os.path.join(root, 'waasmaierdb.h5'), 'w') as elements:
        while 1:
            id = lines.pop(0).split()[0]
            if id == 'END':
                break

            el = elements.create_group(id)

            line = lines.pop(0)
            el['a'] = np.zeros(5, dtype='d')
            for i in range(5):
                el['a'][i], line = np.float64(line[:10]), line[10:]
            el['c'] = np.float64(line[:10])

            line = lines.pop(0)
            el['b'] = np.zeros(5, dtype='d')
            for i in range(5):
                el['b'][i], line = np.float64(line[:10]), line[10:]

            line = lines.pop(0) # skip empty line


def create_database(source, dest, overwrite=False, silent=False):
    """add f0 data from Waasmaier and Kirfel"""
    if not os.path.isfile(source):
        if silent:
            return
        raise IOError('File "%s" does not exist' % source)
    if os.path.isfile(dest) and overwrite:
        os.remove(dest)
    if os.path.exists(dest):
        if silent:
            return
        raise IOError('File "%s" already exists. Use "-f" to overwrite' % dest)

    conn = sqlite3.connect(dest)
    c = conn.cursor()
    c.execute(
        '''create table f0 (id integer primary key,
        atomic_number integer, element text, ion text,
        offset real, scale text, exponent text)
        ''')

    with io.open(source, mode='rb') as f:
        line = f.readline()
        line = f.readline()
        if not 'Elastic Photon-Atom Scattering' in line:
            raise RuntimeError('Source file not recognized')

        id = 0
        while line:
            if line.startswith('#S '):
                id += 1
                #print [s for s in line[3:].split()]
                zstr, ion = [s.strip() for s in line[3:].split()]
                atno = int(zstr)
                d_len = int(f.readline().split()[-1])-1
                line = f.readline()
                line = f.readline().strip()
                data = [i for i in line.split()]
                for i in data:
                    if len(i) > d_len:
                        print ion, i
                        raise RuntimeError
                offset = data[5]
                scale = json.dumps(data[:5])
                exponent = json.dumps(data[6:])

                elem = ion.translate(None, '0123456789+-').strip()
                for suffix in (('va', 'val')):
                    if elem.endswith(suffix):
                        elem = elem[:-len(suffix)]

                c.execute('insert into f0 values (?,?,?,?,?,?,?)',
                          (id, atno, elem, ion, offset, scale, exponent))

            line = f.readline()

    conn.commit()
    c.close()


if __name__ == '__main__':
    try:
        import argparse
    except ImportError:
        raise RuntimeError(
            'argparse module not found.\n'
            'Install argparse or update to python-2.7 or >=python-3.2.'
            )
    parser = argparse.ArgumentParser(
        description='convert ascii "source" file to an SQLite database "dest"'
        )
    parser.add_argument('source')
    parser.add_argument('dest')
    parser.add_argument('-f', '--force', action='store_true')
    parser.add_argument('-s', '--silent', action='store_true')
    args = parser.parse_args()

    create_database(
        args.source, args.dest, overwrite=args.force, silent=args.silent
        )
