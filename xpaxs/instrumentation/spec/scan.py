"""
"""

#---------------------------------------------------------------------------
# Stdlib imports
#---------------------------------------------------------------------------

import logging
import os

#---------------------------------------------------------------------------
# Extlib imports
#---------------------------------------------------------------------------

import numpy
from PyQt4 import QtCore
from SpecClient import SpecScan, SpecCommand, SpecConnectionsManager, \
    SpecEventsDispatcher, SpecWaitObject

#---------------------------------------------------------------------------
# xpaxs imports
#---------------------------------------------------------------------------

from xpaxs.instrumentation.spec import TEST_SPEC

#---------------------------------------------------------------------------
# Normal code begins
#---------------------------------------------------------------------------

logger = logging.getLogger('XPaXS.instrumentation.spec.client.scan')



class QtSpecScanBase(SpecScan.SpecScanA, QtCore.QObject):

    def __init__(self, specVersion, parent=None):
        QtCore.QObject.__init__(self, parent)
        SpecScan.SpecScanA.__init__(self, specVersion)

        self._resume = SpecCommand.SpecCommandA('scan_on', specVersion)

        self._scanData = None

    def __call__(self, cmd):
        if self.connection.isSpecConnected():
            self.connection.send_msg_cmd(cmd)

    def abort(self):
        if self.isScanning():
            self.connection.abort()
            self.scanAborted()

    def connected(self):
        pass

    def disconnected(self):
        pass

    def newScan(self, scanParameters):
        for key, value in scanParameters.iteritems():
            if ',' in value:
                if '.' in value:
                    temp = numpy.fromstring(value, sep=',', dtype='f')
                else:
                    temp = numpy.fromstring(value, sep=',', dtype='i')
                if len(temp) == value.count(','): value = temp
            else:
                try:
                    if ('e' in value) or ('.' in value):
                        value = float(value)
                    else:
                        value = int(value)
                except ValueError:
                    pass
            scanParameters[key] = value
        logger.debug('newScan: %s', scanParameters)

        if 'mcas' not in scanParameters:
            scanParameters['mcas'] = 'MCA'
            scanParameters['mcaChannels_MCA'] = numpy.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047])
        scanParameters['mcaEnergy_MCA'] = numpy.array([0.000000,0.010450,0.020900,0.031350,0.041800,0.052250,0.062700,0.073150,0.083600,0.094050,0.104500,0.114950,0.125400,0.135850,0.146300,0.156750,0.167200,0.177650,0.188100,0.198550,0.209000,0.219450,0.229900,0.240350,0.250800,0.261250,0.271700,0.282150,0.292600,0.303050,0.313500,0.323950,0.334400,0.344850,0.355300,0.365750,0.376200,0.386650,0.397100,0.407550,0.418000,0.428450,0.438900,0.449350,0.459800,0.470250,0.480700,0.491150,0.501600,0.512050,0.522500,0.532950,0.543400,0.553850,0.564300,0.574750,0.585200,0.595650,0.606100,0.616550,0.627000,0.637450,0.647900,0.658350,0.668800,0.679250,0.689700,0.700150,0.710600,0.721050,0.731500,0.741950,0.752400,0.762850,0.773300,0.783750,0.794200,0.804650,0.815100,0.825550,0.836000,0.846450,0.856900,0.867350,0.877800,0.888250,0.898700,0.909150,0.919600,0.930050,0.940500,0.950950,0.961400,0.971850,0.982300,0.992750,1.003200,1.013650,1.024100,1.034550,1.045000,1.055450,1.065900,1.076350,1.086800,1.097250,1.107700,1.118150,1.128600,1.139050,1.149500,1.159950,1.170400,1.180850,1.191300,1.201750,1.212200,1.222650,1.233100,1.243550,1.254000,1.264450,1.274900,1.285350,1.295800,1.306250,1.316700,1.327150,1.337600,1.348050,1.358500,1.368950,1.379400,1.389850,1.400300,1.410750,1.421200,1.431650,1.442100,1.452550,1.463000,1.473450,1.483900,1.494350,1.504800,1.515250,1.525700,1.536150,1.546600,1.557050,1.567500,1.577950,1.588400,1.598850,1.609300,1.619750,1.630200,1.640650,1.651100,1.661550,1.672000,1.682450,1.692900,1.703350,1.713800,1.724250,1.734700,1.745150,1.755600,1.766050,1.776500,1.786950,1.797400,1.807850,1.818300,1.828750,1.839200,1.849650,1.860100,1.870550,1.881000,1.891450,1.901900,1.912350,1.922800,1.933250,1.943700,1.954150,1.964600,1.975050,1.985500,1.995950,2.006400,2.016850,2.027300,2.037750,2.048200,2.058650,2.069100,2.079550,2.090000,2.100450,2.110900,2.121350,2.131800,2.142250,2.152700,2.163150,2.173600,2.184050,2.194500,2.204950,2.215400,2.225850,2.236300,2.246750,2.257200,2.267650,2.278100,2.288550,2.299000,2.309450,2.319900,2.330350,2.340800,2.351250,2.361700,2.372150,2.382600,2.393050,2.403500,2.413950,2.424400,2.434850,2.445300,2.455750,2.466200,2.476650,2.487100,2.497550,2.508000,2.518450,2.528900,2.539350,2.549800,2.560250,2.570700,2.581150,2.591600,2.602050,2.612500,2.622950,2.633400,2.643850,2.654300,2.664750,2.675200,2.685650,2.696100,2.706550,2.717000,2.727450,2.737900,2.748350,2.758800,2.769250,2.779700,2.790150,2.800600,2.811050,2.821500,2.831950,2.842400,2.852850,2.863300,2.873750,2.884200,2.894650,2.905100,2.915550,2.926000,2.936450,2.946900,2.957350,2.967800,2.978250,2.988700,2.999150,3.009600,3.020050,3.030500,3.040950,3.051400,3.061850,3.072300,3.082750,3.093200,3.103650,3.114100,3.124550,3.135000,3.145450,3.155900,3.166350,3.176800,3.187250,3.197700,3.208150,3.218600,3.229050,3.239500,3.249950,3.260400,3.270850,3.281300,3.291750,3.302200,3.312650,3.323100,3.333550,3.344000,3.354450,3.364900,3.375350,3.385800,3.396250,3.406700,3.417150,3.427600,3.438050,3.448500,3.458950,3.469400,3.479850,3.490300,3.500750,3.511200,3.521650,3.532100,3.542550,3.553000,3.563450,3.573900,3.584350,3.594800,3.605250,3.615700,3.626150,3.636600,3.647050,3.657500,3.667950,3.678400,3.688850,3.699300,3.709750,3.720200,3.730650,3.741100,3.751550,3.762000,3.772450,3.782900,3.793350,3.803800,3.814250,3.824700,3.835150,3.845600,3.856050,3.866500,3.876950,3.887400,3.897850,3.908300,3.918750,3.929200,3.939650,3.950100,3.960550,3.971000,3.981450,3.991900,4.002350,4.012800,4.023250,4.033700,4.044150,4.054600,4.065050,4.075500,4.085950,4.096400,4.106850,4.117300,4.127750,4.138200,4.148650,4.159100,4.169550,4.180000,4.190450,4.200900,4.211350,4.221800,4.232250,4.242700,4.253150,4.263600,4.274050,4.284500,4.294950,4.305400,4.315850,4.326300,4.336750,4.347200,4.357650,4.368100,4.378550,4.389000,4.399450,4.409900,4.420350,4.430800,4.441250,4.451700,4.462150,4.472600,4.483050,4.493500,4.503950,4.514400,4.524850,4.535300,4.545750,4.556200,4.566650,4.577100,4.587550,4.598000,4.608450,4.618900,4.629350,4.639800,4.650250,4.660700,4.671150,4.681600,4.692050,4.702500,4.712950,4.723400,4.733850,4.744300,4.754750,4.765200,4.775650,4.786100,4.796550,4.807000,4.817450,4.827900,4.838350,4.848800,4.859250,4.869700,4.880150,4.890600,4.901050,4.911500,4.921950,4.932400,4.942850,4.953300,4.963750,4.974200,4.984650,4.995100,5.005550,5.016000,5.026450,5.036900,5.047350,5.057800,5.068250,5.078700,5.089150,5.099600,5.110050,5.120500,5.130950,5.141400,5.151850,5.162300,5.172750,5.183200,5.193650,5.204100,5.214550,5.225000,5.235450,5.245900,5.256350,5.266800,5.277250,5.287700,5.298150,5.308600,5.319050,5.329500,5.339950,5.350400,5.360850,5.371300,5.381750,5.392200,5.402650,5.413100,5.423550,5.434000,5.444450,5.454900,5.465350,5.475800,5.486250,5.496700,5.507150,5.517600,5.528050,5.538500,5.548950,5.559400,5.569850,5.580300,5.590750,5.601200,5.611650,5.622100,5.632550,5.643000,5.653450,5.663900,5.674350,5.684800,5.695250,5.705700,5.716150,5.726600,5.737050,5.747500,5.757950,5.768400,5.778850,5.789300,5.799750,5.810200,5.820650,5.831100,5.841550,5.852000,5.862450,5.872900,5.883350,5.893800,5.904250,5.914700,5.925150,5.935600,5.946050,5.956500,5.966950,5.977400,5.987850,5.998300,6.008750,6.019200,6.029650,6.040100,6.050550,6.061000,6.071450,6.081900,6.092350,6.102800,6.113250,6.123700,6.134150,6.144600,6.155050,6.165500,6.175950,6.186400,6.196850,6.207300,6.217750,6.228200,6.238650,6.249100,6.259550,6.270000,6.280450,6.290900,6.301350,6.311800,6.322250,6.332700,6.343150,6.353600,6.364050,6.374500,6.384950,6.395400,6.405850,6.416300,6.426750,6.437200,6.447650,6.458100,6.468550,6.479000,6.489450,6.499900,6.510350,6.520800,6.531250,6.541700,6.552150,6.562600,6.573050,6.583500,6.593950,6.604400,6.614850,6.625300,6.635750,6.646200,6.656650,6.667100,6.677550,6.688000,6.698450,6.708900,6.719350,6.729800,6.740250,6.750700,6.761150,6.771600,6.782050,6.792500,6.802950,6.813400,6.823850,6.834300,6.844750,6.855200,6.865650,6.876100,6.886550,6.897000,6.907450,6.917900,6.928350,6.938800,6.949250,6.959700,6.970150,6.980600,6.991050,7.001500,7.011950,7.022400,7.032850,7.043300,7.053750,7.064200,7.074650,7.085100,7.095550,7.106000,7.116450,7.126900,7.137350,7.147800,7.158250,7.168700,7.179150,7.189600,7.200050,7.210500,7.220950,7.231400,7.241850,7.252300,7.262750,7.273200,7.283650,7.294100,7.304550,7.315000,7.325450,7.335900,7.346350,7.356800,7.367250,7.377700,7.388150,7.398600,7.409050,7.419500,7.429950,7.440400,7.450850,7.461300,7.471750,7.482200,7.492650,7.503100,7.513550,7.524000,7.534450,7.544900,7.555350,7.565800,7.576250,7.586700,7.597150,7.607600,7.618050,7.628500,7.638950,7.649400,7.659850,7.670300,7.680750,7.691200,7.701650,7.712100,7.722550,7.733000,7.743450,7.753900,7.764350,7.774800,7.785250,7.795700,7.806150,7.816600,7.827050,7.837500,7.847950,7.858400,7.868850,7.879300,7.889750,7.900200,7.910650,7.921100,7.931550,7.942000,7.952450,7.962900,7.973350,7.983800,7.994250,8.004700,8.015150,8.025600,8.036050,8.046500,8.056950,8.067400,8.077850,8.088300,8.098750,8.109200,8.119650,8.130100,8.140550,8.151000,8.161450,8.171900,8.182350,8.192800,8.203250,8.213700,8.224150,8.234600,8.245050,8.255500,8.265950,8.276400,8.286850,8.297300,8.307750,8.318200,8.328650,8.339100,8.349550,8.360000,8.370450,8.380900,8.391350,8.401800,8.412250,8.422700,8.433150,8.443600,8.454050,8.464500,8.474950,8.485400,8.495850,8.506300,8.516750,8.527200,8.537650,8.548100,8.558550,8.569000,8.579450,8.589900,8.600350,8.610800,8.621250,8.631700,8.642150,8.652600,8.663050,8.673500,8.683950,8.694400,8.704850,8.715300,8.725750,8.736200,8.746650,8.757100,8.767550,8.778000,8.788450,8.798900,8.809350,8.819800,8.830250,8.840700,8.851150,8.861600,8.872050,8.882500,8.892950,8.903400,8.913850,8.924300,8.934750,8.945200,8.955650,8.966100,8.976550,8.987000,8.997450,9.007900,9.018350,9.028800,9.039250,9.049700,9.060150,9.070600,9.081050,9.091500,9.101950,9.112400,9.122850,9.133300,9.143750,9.154200,9.164650,9.175100,9.185550,9.196000,9.206450,9.216900,9.227350,9.237800,9.248250,9.258700,9.269150,9.279600,9.290050,9.300500,9.310950,9.321400,9.331850,9.342300,9.352750,9.363200,9.373650,9.384100,9.394550,9.405000,9.415450,9.425900,9.436350,9.446800,9.457250,9.467700,9.478150,9.488600,9.499050,9.509500,9.519950,9.530400,9.540850,9.551300,9.561750,9.572200,9.582650,9.593100,9.603550,9.614000,9.624450,9.634900,9.645350,9.655800,9.666250,9.676700,9.687150,9.697600,9.708050,9.718500,9.728950,9.739400,9.749850,9.760300,9.770750,9.781200,9.791650,9.802100,9.812550,9.823000,9.833450,9.843900,9.854350,9.864800,9.875250,9.885700,9.896150,9.906600,9.917050,9.927500,9.937950,9.948400,9.958850,9.969300,9.979750,9.990200,10.000650,10.011100,10.021550,10.032000,10.042450,10.052900,10.063350,10.073800,10.084250,10.094700,10.105150,10.115600,10.126050,10.136500,10.146950,10.157400,10.167850,10.178300,10.188750,10.199200,10.209650,10.220100,10.230550,10.241000,10.251450,10.261900,10.272350,10.282800,10.293250,10.303700,10.314150,10.324600,10.335050,10.345500,10.355950,10.366400,10.376850,10.387300,10.397750,10.408200,10.418650,10.429100,10.439550,10.450000,10.460450,10.470900,10.481350,10.491800,10.502250,10.512700,10.523150,10.533600,10.544050,10.554500,10.564950,10.575400,10.585850,10.596300,10.606750,10.617200,10.627650,10.638100,10.648550,10.659000,10.669450,10.679900,10.690350,10.700800,10.711250,10.721700,10.732150,10.742600,10.753050,10.763500,10.773950,10.784400,10.794850,10.805300,10.815750,10.826200,10.836650,10.847100,10.857550,10.868000,10.878450,10.888900,10.899350,10.909800,10.920250,10.930700,10.941150,10.951600,10.962050,10.972500,10.982950,10.993400,11.003850,11.014300,11.024750,11.035200,11.045650,11.056100,11.066550,11.077000,11.087450,11.097900,11.108350,11.118800,11.129250,11.139700,11.150150,11.160600,11.171050,11.181500,11.191950,11.202400,11.212850,11.223300,11.233750,11.244200,11.254650,11.265100,11.275550,11.286000,11.296450,11.306900,11.317350,11.327800,11.338250,11.348700,11.359150,11.369600,11.380050,11.390500,11.400950,11.411400,11.421850,11.432300,11.442750,11.453200,11.463650,11.474100,11.484550,11.495000,11.505450,11.515900,11.526350,11.536800,11.547250,11.557700,11.568150,11.578600,11.589050,11.599500,11.609950,11.620400,11.630850,11.641300,11.651750,11.662200,11.672650,11.683100,11.693550,11.704000,11.714450,11.724900,11.735350,11.745800,11.756250,11.766700,11.777150,11.787600,11.798050,11.808500,11.818950,11.829400,11.839850,11.850300,11.860750,11.871200,11.881650,11.892100,11.902550,11.913000,11.923450,11.933900,11.944350,11.954800,11.965250,11.975700,11.986150,11.996600,12.007050,12.017500,12.027950,12.038400,12.048850,12.059300,12.069750,12.080200,12.090650,12.101100,12.111550,12.122000,12.132450,12.142900,12.153350,12.163800,12.174250,12.184700,12.195150,12.205600,12.216050,12.226500,12.236950,12.247400,12.257850,12.268300,12.278750,12.289200,12.299650,12.310100,12.320550,12.331000,12.341450,12.351900,12.362350,12.372800,12.383250,12.393700,12.404150,12.414600,12.425050,12.435500,12.445950,12.456400,12.466850,12.477300,12.487750,12.498200,12.508650,12.519100,12.529550,12.540000,12.550450,12.560900,12.571350,12.581800,12.592250,12.602700,12.613150,12.623600,12.634050,12.644500,12.654950,12.665400,12.675850,12.686300,12.696750,12.707200,12.717650,12.728100,12.738550,12.749000,12.759450,12.769900,12.780350,12.790800,12.801250,12.811700,12.822150,12.832600,12.843050,12.853500,12.863950,12.874400,12.884850,12.895300,12.905750,12.916200,12.926650,12.937100,12.947550,12.958000,12.968450,12.978900,12.989350,12.999800,13.010250,13.020700,13.031150,13.041600,13.052050,13.062500,13.072950,13.083400,13.093850,13.104300,13.114750,13.125200,13.135650,13.146100,13.156550,13.167000,13.177450,13.187900,13.198350,13.208800,13.219250,13.229700,13.240150,13.250600,13.261050,13.271500,13.281950,13.292400,13.302850,13.313300,13.323750,13.334200,13.344650,13.355100,13.365550,13.376000,13.386450,13.396900,13.407350,13.417800,13.428250,13.438700,13.449150,13.459600,13.470050,13.480500,13.490950,13.501400,13.511850,13.522300,13.532750,13.543200,13.553650,13.564100,13.574550,13.585000,13.595450,13.605900,13.616350,13.626800,13.637250,13.647700,13.658150,13.668600,13.679050,13.689500,13.699950,13.710400,13.720850,13.731300,13.741750,13.752200,13.762650,13.773100,13.783550,13.794000,13.804450,13.814900,13.825350,13.835800,13.846250,13.856700,13.867150,13.877600,13.888050,13.898500,13.908950,13.919400,13.929850,13.940300,13.950750,13.961200,13.971650,13.982100,13.992550,14.003000,14.013450,14.023900,14.034350,14.044800,14.055250,14.065700,14.076150,14.086600,14.097050,14.107500,14.117950,14.128400,14.138850,14.149300,14.159750,14.170200,14.180650,14.191100,14.201550,14.212000,14.222450,14.232900,14.243350,14.253800,14.264250,14.274700,14.285150,14.295600,14.306050,14.316500,14.326950,14.337400,14.347850,14.358300,14.368750,14.379200,14.389650,14.400100,14.410550,14.421000,14.431450,14.441900,14.452350,14.462800,14.473250,14.483700,14.494150,14.504600,14.515050,14.525500,14.535950,14.546400,14.556850,14.567300,14.577750,14.588200,14.598650,14.609100,14.619550,14.630000,14.640450,14.650900,14.661350,14.671800,14.682250,14.692700,14.703150,14.713600,14.724050,14.734500,14.744950,14.755400,14.765850,14.776300,14.786750,14.797200,14.807650,14.818100,14.828550,14.839000,14.849450,14.859900,14.870350,14.880800,14.891250,14.901700,14.912150,14.922600,14.933050,14.943500,14.953950,14.964400,14.974850,14.985300,14.995750,15.006200,15.016650,15.027100,15.037550,15.048000,15.058450,15.068900,15.079350,15.089800,15.100250,15.110700,15.121150,15.131600,15.142050,15.152500,15.162950,15.173400,15.183850,15.194300,15.204750,15.215200,15.225650,15.236100,15.246550,15.257000,15.267450,15.277900,15.288350,15.298800,15.309250,15.319700,15.330150,15.340600,15.351050,15.361500,15.371950,15.382400,15.392850,15.403300,15.413750,15.424200,15.434650,15.445100,15.455550,15.466000,15.476450,15.486900,15.497350,15.507800,15.518250,15.528700,15.539150,15.549600,15.560050,15.570500,15.580950,15.591400,15.601850,15.612300,15.622750,15.633200,15.643650,15.654100,15.664550,15.675000,15.685450,15.695900,15.706350,15.716800,15.727250,15.737700,15.748150,15.758600,15.769050,15.779500,15.789950,15.800400,15.810850,15.821300,15.831750,15.842200,15.852650,15.863100,15.873550,15.884000,15.894450,15.904900,15.915350,15.925800,15.936250,15.946700,15.957150,15.967600,15.978050,15.988500,15.998950,16.009399,16.019850,16.030300,16.040751,16.051201,16.061649,16.072100,16.082550,16.093000,16.103451,16.113899,16.124350,16.134800,16.145250,16.155701,16.166149,16.176600,16.187050,16.197500,16.207951,16.218399,16.228849,16.239300,16.249750,16.260201,16.270651,16.281099,16.291550,16.302000,16.312450,16.322901,16.333349,16.343800,16.354250,16.364700,16.375151,16.385599,16.396049,16.406500,16.416950,16.427401,16.437851,16.448299,16.458750,16.469200,16.479650,16.490101,16.500549,16.511000,16.521450,16.531900,16.542351,16.552799,16.563250,16.573700,16.584150,16.594601,16.605049,16.615499,16.625950,16.636400,16.646851,16.657301,16.667749,16.678200,16.688650,16.699100,16.709551,16.719999,16.730450,16.740900,16.751350,16.761801,16.772249,16.782700,16.793150,16.803600,16.814051,16.824499,16.834949,16.845400,16.855850,16.866301,16.876751,16.887199,16.897650,16.908100,16.918550,16.929001,16.939449,16.949900,16.960350,16.970800,16.981251,16.991699,17.002150,17.012600,17.023050,17.033501,17.043949,17.054399,17.064850,17.075300,17.085751,17.096201,17.106649,17.117100,17.127550,17.138000,17.148451,17.158899,17.169350,17.179800,17.190250,17.200701,17.211149,17.221600,17.232050,17.242500,17.252951,17.263399,17.273849,17.284300,17.294750,17.305201,17.315651,17.326099,17.336550,17.347000,17.357450,17.367901,17.378349,17.388800,17.399250,17.409700,17.420151,17.430599,17.441050,17.451500,17.461950,17.472401,17.482849,17.493299,17.503750,17.514200,17.524651,17.535101,17.545549,17.556000,17.566450,17.576900,17.587351,17.597799,17.608250,17.618700,17.629150,17.639601,17.650049,17.660500,17.670950,17.681400,17.691851,17.702299,17.712749,17.723200,17.733650,17.744101,17.754551,17.764999,17.775450,17.785900,17.796350,17.806801,17.817249,17.827700,17.838150,17.848600,17.859051,17.869499,17.879950,17.890400,17.900850,17.911301,17.921749,17.932199,17.942650,17.953100,17.963551,17.974001,17.984449,17.994900,18.005350,18.015800,18.026251,18.036699,18.047150,18.057600,18.068050,18.078501,18.088949,18.099400,18.109850,18.120300,18.130751,18.141199,18.151649,18.162100,18.172550,18.183001,18.193451,18.203899,18.214350,18.224800,18.235250,18.245701,18.256149,18.266600,18.277050,18.287500,18.297951,18.308399,18.318850,18.329300,18.339750,18.350201,18.360649,18.371099,18.381550,18.392000,18.402451,18.412901,18.423349,18.433800,18.444250,18.454700,18.465151,18.475599,18.486050,18.496500,18.506950,18.517401,18.527849,18.538300,18.548750,18.559200,18.569651,18.580099,18.590549,18.601000,18.611450,18.621901,18.632351,18.642799,18.653250,18.663700,18.674150,18.684601,18.695049,18.705500,18.715950,18.726400,18.736851,18.747299,18.757750,18.768200,18.778650,18.789101,18.799549,18.809999,18.820450,18.830900,18.841351,18.851801,18.862249,18.872700,18.883150,18.893600,18.904051,18.914499,18.924950,18.935400,18.945850,18.956301,18.966749,18.977200,18.987650,18.998100,19.008551,19.018999,19.029449,19.039900,19.050350,19.060801,19.071251,19.081699,19.092150,19.102600,19.113050,19.123501,19.133949,19.144400,19.154850,19.165300,19.175751,19.186199,19.196650,19.207100,19.217550,19.228001,19.238449,19.248899,19.259350,19.269800,19.280251,19.290701,19.301149,19.311600,19.322050,19.332500,19.342951,19.353399,19.363850,19.374300,19.384750,19.395201,19.405649,19.416100,19.426550,19.437000,19.447451,19.457899,19.468349,19.478800,19.489250,19.499701,19.510151,19.520599,19.531050,19.541500,19.551950,19.562401,19.572849,19.583300,19.593750,19.604200,19.614651,19.625099,19.635550,19.646000,19.656450,19.666901,19.677349,19.687799,19.698250,19.708700,19.719151,19.729601,19.740049,19.750500,19.760950,19.771400,19.781851,19.792299,19.802750,19.813200,19.823650,19.834101,19.844549,19.855000,19.865450,19.875900,19.886351,19.896799,19.907249,19.917700,19.928150,19.938601,19.949051,19.959499,19.969950,19.980400,19.990850,20.001301,20.011749,20.022200,20.032650,20.043100,20.053551,20.063999,20.074450,20.084900,20.095350,20.105801,20.116249,20.126699,20.137150,20.147600,20.158051,20.168501,20.178949,20.189400,20.199850,20.210300,20.220751,20.231199,20.241650,20.252100,20.262550,20.273001,20.283449,20.293900,20.304350,20.314800,20.325251,20.335699,20.346149,20.356600,20.367050,20.377501,20.387951,20.398399,20.408850,20.419300,20.429750,20.440201,20.450649,20.461100,20.471550,20.482000,20.492451,20.502899,20.513350,20.523800,20.534250,20.544701,20.555149,20.565599,20.576050,20.586500,20.596951,20.607401,20.617849,20.628300,20.638750,20.649200,20.659651,20.670099,20.680550,20.691000,20.701450,20.711901,20.722349,20.732800,20.743250,20.753700,20.764151,20.774599,20.785049,20.795500,20.805950,20.816401,20.826851,20.837299,20.847750,20.858200,20.868650,20.879101,20.889549,20.900000,20.910450,20.920900,20.931351,20.941799,20.952250,20.962700,20.973150,20.983601,20.994049,21.004499,21.014950,21.025400,21.035851,21.046301,21.056749,21.067200,21.077650,21.088100,21.098551,21.108999,21.119450,21.129900,21.140350,21.150801,21.161249,21.171700,21.182150,21.192600,21.203051,21.213499,21.223949,21.234400,21.244850,21.255301,21.265751,21.276199,21.286650,21.297100,21.307550,21.318001,21.328449,21.338900,21.349350,21.359800,21.370251,21.380699,21.391150])

        import xpaxs
        fileInterface = xpaxs.application.getService('FileInterface')

        if fileInterface:
            specFile = scanParameters['fileName']
            h5File = fileInterface.getH5FileFromKey(specFile)
            self._scanData = fileInterface.createEntry(h5File, scanParameters)

            if self._scanData:
                ScanView = xpaxs.application.getService('ScanView')
                if ScanView:
                    ScanView(self._scanData, beginProcessing=True)

        self.emit(QtCore.SIGNAL("newScanLength"), scanParameters['scanLines'])

    def newScanData(self, scanData):
        logger.debug( 'scanData: %s', scanData)

        if 'MCA' not in scanData:
            scanData['MCA'] = numpy.array([0,1,3,3,4,2,2,0,1,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,1,1,6,3,3,5,2,7,1,1,5,5,4,3,4,6,10,10,15,15,12,10,11,17,19,12,23,22,27,26,18,24,25,29,22,30,31,32,37,33,43,42,50,36,50,42,47,53,42,42,54,54,52,56,52,65,55,67,54,55,67,56,42,59,51,49,60,59,51,51,55,55,58,54,63,58,65,57,55,58,53,59,65,58,62,77,62,67,80,80,83,67,60,70,67,59,75,62,65,58,60,53,62,53,47,59,70,65,56,53,51,41,51,54,71,44,51,54,42,50,49,47,42,51,34,41,45,57,43,45,38,46,44,48,50,50,38,48,47,54,45,50,50,43,55,48,53,58,41,62,46,48,46,67,52,36,43,49,50,53,41,53,55,42,44,44,55,46,55,56,55,42,52,44,35,45,45,40,37,43,45,40,35,63,45,53,49,44,47,41,45,58,48,59,63,70,56,64,72,88,100,79,104,109,118,110,131,96,98,101,108,109,96,85,78,73,55,63,70,65,56,57,67,70,66,93,101,102,125,144,166,175,220,246,318,343,386,424,448,446,488,477,493,506,404,445,400,341,283,267,217,213,162,124,113,107,101,97,99,106,102,129,133,167,186,233,261,305,374,443,448,517,579,626,681,739,773,755,760,740,707,669,628,541,489,394,353,288,258,186,172,125,92,91,96,70,79,64,93,86,103,134,105,116,146,135,167,165,177,160,165,179,154,131,124,130,110,99,96,74,69,54,59,78,54,36,35,45,49,30,48,45,43,41,45,38,54,46,66,62,73,78,83,115,145,154,191,232,272,303,356,369,405,458,493,537,515,563,527,537,515,439,399,407,373,342,299,275,258,220,205,183,173,170,136,146,141,108,103,101,106,106,81,125,102,86,117,109,100,121,123,139,149,157,152,135,172,165,155,138,174,160,129,145,139,125,110,94,93,88,82,86,62,72,55,62,77,55,72,75,55,60,60,68,58,75,55,69,95,84,93,72,88,74,77,95,121,103,106,99,94,118,119,118,116,112,148,90,116,96,103,102,102,103,82,79,81,83,74,77,66,75,81,61,87,83,65,70,55,69,57,90,87,88,84,99,109,107,133,148,158,155,237,186,238,295,303,308,331,330,356,324,334,315,294,301,311,284,231,246,220,193,183,178,201,151,157,134,177,168,196,192,197,230,256,330,359,489,616,788,1022,1396,1899,2549,3235,4235,5294,6886,8352,10380,12329,14511,16731,19117,21182,23321,24857,26614,27392,27284,27399,26825,25961,24470,22793,21016,18731,16360,14422,11873,9772,8171,6613,5194,4136,3226,2324,1816,1282,930,711,480,386,308,238,167,168,142,117,109,115,103,133,127,145,151,145,131,167,184,214,248,285,337,401,501,550,737,914,1052,1365,1604,1911,2128,2503,2827,3254,3632,3928,4190,4475,4543,4722,4609,4520,4564,4281,4082,3769,3468,3053,2625,2305,1985,1620,1330,1062,892,696,519,423,316,247,190,133,90,76,54,63,44,45,31,62,51,56,51,56,57,61,63,66,87,80,72,73,75,75,62,68,68,74,62,47,50,37,34,34,32,17,27,24,16,25,15,24,17,15,19,16,22,29,13,24,24,14,11,22,27,29,31,26,35,46,43,57,55,67,85,78,100,121,130,135,162,171,149,190,197,190,195,174,202,137,174,154,148,115,98,110,91,84,75,68,57,36,58,43,39,32,26,30,33,45,20,33,34,22,25,30,42,32,47,37,57,67,72,107,103,142,225,230,257,347,375,471,576,683,709,863,969,1051,1116,1175,1243,1213,1225,1252,1203,1215,1112,1032,996,883,758,703,617,482,451,369,311,283,234,183,150,131,82,70,66,69,64,52,52,59,41,50,48,31,57,36,38,35,35,34,39,30,27,32,37,31,38,40,40,52,54,48,52,68,73,79,80,83,93,76,83,78,88,78,66,71,77,78,58,60,66,74,64,47,48,52,63,65,67,51,70,81,108,98,145,154,156,166,164,185,235,210,236,217,203,198,204,182,190,180,168,168,113,119,105,80,73,72,65,55,52,36,38,32,20,33,19,29,37,27,24,24,19,20,29,7,29,27,35,17,31,24,28,25,15,22,14,25,19,19,14,19,27,22,15,16,34,17,20,15,19,28,29,24,24,27,30,24,25,34,33,34,34,58,50,56,53,77,77,101,100,131,140,165,177,187,252,256,312,307,372,359,412,410,432,499,453,425,508,481,462,459,408,338,384,324,317,270,216,216,176,136,114,101,87,65,68,48,35,53,29,26,19,23,23,22,19,14,18,17,22,12,15,10,15,17,8,15,26,13,18,13,12,17,18,15,11,17,11,24,12,23,24,20,24,27,17,24,16,17,30,28,25,35,21,21,24,22,22,22,25,30,24,18,22,14,18,23,21,20,19,22,19,15,24,18,26,9,15,20,14,23,16,19,20,19,19,26,21,23,15,29,30,34,16,23,34,26,33,31,30,37,36,37,41,50,45,59,48,41,45,61,55,58,54,68,59,51,61,56,59,47,50,57,52,38,44,45,41,42,35,31,29,36,38,39,38,32,28,18,26,45,28,32,39,31,35,40,21,48,39,43,44,34,38,48,43,36,47,42,42,56,45,34,57,57,51,64,74,93,95,110,116,133,177,195,199,226,264,279,334,357,390,403,362,387,422,392,414,430,425,393,423,370,354,335,382,336,319,282,275,250,221,194,210,159,164,127,154,146,124,115,107,123,116,87,99,86,92,83,72,80,67,71,67,73,65,62,62,61,66,64,67,77,64,91,90,100,115,149,145,153,188,217,252,329,347,421,463,533,621,648,688,837,816,941,951,1011,1097,1051,1028,1095,1083,1085,1038,1040,1002,922,838,810,662,629,526,491,477,373,339,282,234,195,155,149,97,102,96,91,63,53,57,61,45,37,37,34,44,35,29,33,31,33,43,31,39,34,36,41,34,46,68,59,103,101,117,157,161,199,231,251,350,407,470,523,585,636,750,821,920,1016,1064,1161,1210,1214,1278,1290,1376,1375,1282,1315,1271,1251,1163,1141,1033,899,860,761,696,647,554,490,426,388,274,274,211,203,158,145,107,87,72,69,41,45,35,36,28,40,29,22,30,35,28,37,24,36,30,38,34,48,50,55,51,63,53,83,70,91,104,127,116,103,132,147,166,155,213,225,225,250,259,265,286,305,315,342,387,386,408,396,403,385,402,439,437,453,408,365,352,338,381,321,314,289,248,245,174,186,162,147,171,124,112,128,115,111,101,96,83,77,76,71,62,68,78,66,57,66,57,57,58,59,45,58,48,58,40,73,63,64,64,63,56,62,76,101,106,101,130,131,170,190,191,226,227,256,271,302,328,385,408,397,469,469,602,608,580,637,626,637,694,725,633,699,707,689,662,643,618,626,575,493,471,470,407,384,354,330,312,256,224,218,204,186,180,187,165,159,130,124,146,121,115,118,120,109,136,120,127,128,109,113,119,108,98,145,122,106,133,120,115,116,138,117,115,105,133,117,112,122,139,143,131,131,135,148,122,154,154,132,144,161,162,144,154,169,167,175,187,174,192,205,179,197,241,238,224,236,241,250,241,291,295,267,267,277,294,290,287,330,341,346,363,332,334,357,381,408,416,417,414,428,440,459,491,534,530,583,571,624,630,636,677,723,740,780,871,934,911,927,954,1035,1112,1168,1161,1253,1184,1274,1324,1353,1405,1518,1571,1555,1621,1586,1732,1616,1760,1697,1852,1756,1827,1711,1779,1812,1720,1784,1701,1701,1719,1611,1659,1559,1561,1577,1456,1522,1433,1347,1317,1306,1246,1248,1189,1133,1082,948,1070,944,952,886,872,837,798,814,829,719,843,771,808,826,825,844,878,901,973,1106,1188,1285,1390,1421,1512,1638,1830,1860,2003,2062,2095,2202,2296,2348,2198,2337,2375,2324,2370,2091,2167,1920,1931,1782,1652,1572,1365,1271,1081,1065,924,774,691,599,541,469,367,291,285,222,188,157,130,95,98,67,57,55,31,30,23,16,14,16,15,12,2,5,9,4,3,1,2,3,3,2,2,2,1,0,3,1,0,1,2,1,1,2,6,1,2,2,0,1,1,0,3,0,1,2,1,2,3,1,2,1,2,3,2,3,2,1,2,3,5,2,2,3,4,1,4,2,4,4,3,1,2,4,4,0,4,6,7,1,1,0,1,1,4,2,3,3,2,0,0,4,4,3,1,1,1,4,0,0,1,3,3,2,2,0,2,0,0,0,2,1,3,5,1,2,2,0,1,2,3,2,2,4,2,2,2,4,2,6,8,4,2,6,4,3,4,8,8,4,4,6,11,8,3,7,6,6,9,4,8,5,3,1,4,6,4,2,5,4,3,2,1,6,3,2,1,2,4,1,1,3,0,3,0,2,2,3,4,3,2,1,3,4,1,2,2,6,5,5,1,5,4,3,4,3,2,9,5,1,7,4,6,2,6,5,11,7,6,4,6,10,10,3,6,9,10,11,8,10,6,10,5,5,3,8,11,0,8,5,6,6,6,4,5,2,5,6,5,4,3,1,2,1,0,0,0,3,3,5,0,3,0,1,1,1,1,3,3,1,2,2,3,1,2,2,1,3,6,3,4,2,2,2,5,1,4,1,3,5,4,3,5])

        self._scanData.appendDataPoint(scanData)

        i = int(scanData['i'])
        self.emit(QtCore.SIGNAL("newScanPoint"), i)


    def newScanPoint(self, i, x, y, scanData):
        scanData['i'] = i
        scanData['x'] = x
        scanData['y'] = y
        logger.debug( "newScanPoint: %s", scanData)
#        self.emit(QtCore.SIGNAL("newScanPoint(PyQt_PyObject)"), scanData)

    def pause(self):
        logger.info('Scan Paused')
        self.connection.abort()

    def resume(self):
        logger.info('Scan Resumed')
        self._resume()

    def scanAborted(self):
        logger.info('Scan Aborted')
        self.emit(QtCore.SIGNAL("scanAborted()"))
        self.scanFinished()

    def scanFinished(self):
        logger.info( 'scan finished')
        # TODO: save data!
        self.emit(QtCore.SIGNAL("scanFinished()"))

    def scanStarted(self):
        logger.info( 'scan started')
        self.emit(QtCore.SIGNAL("scanStarted()"))

    def ascan(self, *args):
        cmd = "ascan %s %f %f %d %f"%args
        logger.debug(cmd)
        self.emit(QtCore.SIGNAL("newAscan(PyQt_PyObject)"), args[:-1])
        self(cmd)

    def a2scan(self, *args):
        cmd = "a2scan %s %f %f \
                      %s %f %f \
                      %d %f"%args
        logger.debug(cmd)
        self.emit(QtCore.SIGNAL("newA2scan(PyQt_PyObject)"), args[:-1])
        self(cmd)

    def a3scan(self, *args):
        cmd = "a3scan %s %f %f \
                      %s %f %f \
                      %s %f %f \
                      %d %f"%args
        logger.debug(cmd)
        self.emit(QtCore.SIGNAL("newA3scan(PyQt_PyObject)"), args[:-1])
        self(cmd)

    def mesh(self, *args):
        cmd = "mesh %s %f %f %d \
                    %s %f %f %d \
                    %f"%args
        logger.debug(cmd)
        self.emit(QtCore.SIGNAL("newMesh(PyQt_PyObject)"), args[:-1])
        self.emit(QtCore.SIGNAL("xAxisLabel(PyQt_PyObject)"), args[0])
        self.emit(QtCore.SIGNAL("xAxisLims(PyQt_PyObject)"), args[1:3])
        self.emit(QtCore.SIGNAL("yAxisLabel(PyQt_PyObject)"), args[4])
        self.emit(QtCore.SIGNAL("yAxisLims(PyQt_PyObject)"), args[5:7])
        self(cmd)



class TestQtSpecScanA(QtSpecScanBase):

    def __init__(self, specVersion, parent=None):
        pass
        #QtCore.QObject.__init__(self, parent)
        #SpecScan.SpecScanA.__init__(self)#, specVersion)

    def newScan(self, scanParameters):
        pass
        for key, value in scanParameters.iteritems():
            if ',' in value:
                if '.' in value:
                    temp = numpy.fromstring(value, sep=',', dtype='f')
                else:
                    temp = numpy.fromstring(value, sep=',', dtype='i')
                if len(temp) == value.count(','): value = temp
            else:
                try:
                    if ('e' in value) or ('.' in value):
                        value = float(value)
                    else:
                        value = int(value)
                except ValueError:
                    pass
            scanParameters[key] = value
        logger.debug('newScan: %s', scanParameters)


    def _startScan(self, cmd):
        if self.connection.isSpecConnected():
            self.connection.send_msg_cmd(cmd)
            return True
        else:
            return False

    def __newScanPoint(self, scanData):
        return
        if DEBUG: print "SpecScanA.__newScanPoint", scanData
        if self.__scanning and scanData:
            scanData = dict([i.split("=", 1)
                             for i in scanData.rstrip("\t").split("\t")])

            for key, value in scanData.iteritems():
                if ',' in value:
                    if '.' in value:
                        value = numpy.fromstring(value, sep=',', dtype='f')
                    else:
                        value = numpy.fromstring(value, sep=',', dtype='i')
                else:
                    value = float(value)
                scanData[key] = value

                if key == "i": i = value
                elif key == "x": x = value
                elif key == self.scanCounterMne: y = value

            # hack to know if we should call newScanPoint with
            # scanData or not (for backward compatiblity)
            if len(self.newScanPoint.im_func.func_code.co_varnames) > 4:
              self.newScanPoint(i, x, y, scanData)
            else:
              self.newScanPoint(i, x, y)

    def connectToSpec(self, specVersion):
        return
        self.connection = SpecConnectionsManager().getConnection(specVersion)

        SpecEventsDispatcher.connect(self.connection, 'connected',
                                     self.connected)
        SpecEventsDispatcher.connect(self.connection, 'disconnected',
                                     self.__disconnected)

        self.connection.registerChannel('var/_SC_NEWSCAN', self.__newScan,
                                    dispatchMode=SpecEventsDispatcher.FIREEVENT)
        self.connection.registerChannel('var/_SC_NEWPLOTDATA',
                                    self.__newScanPoint,
                                    dispatchMode=SpecEventsDispatcher.FIREEVENT)
        self.connection.registerChannel('var/_SC_NEWSCANDATA',
                                    self.__newScanData,
                                    dispatchMode=SpecEventsDispatcher.FIREEVENT)

        if self.connection.isSpecConnected():
            self.connected()

    def isConnected(self):
        return QtCore.QObject() and True
        return self.connection and self.connection.isSpecConnected()

    def connected(self):
        pass

    def __disconnected(self):
        self.scanCounterMne = None
        self.__scanning = False
        self.scanParams = {}

        self.disconnected()

    def disconnected(self):
        pass

    def __newScan(self, scanParams):
        return

        if DEBUG: print "SpecScanA.__newScan", scanParams
        if not scanParams:
            if self.__scanning:
                self.scanFinished()
                self.__scanning = False
            return

        self.__scanning = False

        self.scanParams = dict([i.split("=", 1)
                                for i in scanParams.rstrip("\t").split("\t")])

        if type(self.scanParams) != types.DictType:
            return

        self.newScan(self.scanParams)

        self.scanCounterMne = self.scanParams.get('counter')
        if (not self.scanCounterMne) or self.scanCounterMne == '?':
            logging.getLogger("SpecClient").error(
                                "No counter selected for scan.")
            self.scanCounterMne = None
            return

        self.__scanning = True
        self.scanStarted() # A.B

    def getScanType(self):
        return 'mesh'
        try:
            return self.scanParams['scantype']
        except:
            return -1

    def newScan(self, scanParameters):
        if DEBUG: print "SpecScanA.newScan", scanParameters
        pass

    def __newScanData(self, scanData):
        if DEBUG: print "SpecScanA.__newScanData", scanData
        return
        if self.__scanning and scanData:
            scanData = dict([i.split("=", 1)
                             for i in scanData.rstrip("\t").split("\t")])

            for key, value in scanData.iteritems():
                if ',' in value:
                    if '.' in value:
                        value = numpy.fromstring(value, sep=',', dtype='f')
                    else:
                        value = numpy.fromstring(value, sep=',', dtype='i')
                else:
                    value = float(value)
                scanData[key] = value

            self.newScanData(copy.deepcopy(scanData))

    def newScanData(self, scanData):
        if DEBUG: print "SpecScanA.newScanData", scanData
        pass


if TEST_SPEC:
    class QtSpecScanA(TestQtSpecScanA):
        pass
else:
    class QtSpecScanA(QtSpecScanBase):
        pass

