#
# skipmode [%precount%] [%counter% %threshold%]
#   Do a quick precount to determine if the sample is present.
#   If precount is not zero, integrate %counter% for %precount%
#   duration (not less than 0.2 seconds), and if fewer than
#   %threshold% counts are recorded for %counter%, don't do a
#   full measurement and move on to the next point in the scan.
#
def skipmode '{
    if (($# < 1) || ($1 &&  $# != 3)){
        eprint "Usage: skipmode precount [counter threshold]"
        exit
    }

    if ($1 != 0) {
        if ("$2" != cnt_mne($2) && "$2" != $2){
            eprint "Invalid counter name:  $2"
            exit
        }

        global _SKIPMODE[]

        _SKIPMODE["precount"] = $1
        _SKIPMODE["counter"] = $2
        _SKIPMODE["threshold"] = $3

        cdef("user_Fheader", "_skipmode_Fheader;", "_skip_count_")
        cdef("user_postscan_head", "_skipmode_postscan_head;", "_skip_count_")
        cdef("user_precount", "_skipmode_precount;", "_skip_count_", 0x10)
        cdef("user_getcounts", "_skipmode_getcounts;", "_skip_count_")
    } else {
        unglobal _SKIPMODE

        cdef("", "", "_skip_count_", "delete")
    }
}'


def _skipmode_Fheader '{
    printf("#C SKIPMODE %s %d\n", cnt_mne(_SKIPMODE["counter"]), \
        _SKIPMODE["threshold"])
}'


def _skipmode_postscan_head '{
    if (SC_DATA_ACTIVE) {
        _skipmode_client_set_env()
    }
}'

def _skipmode_client_set_env() '{
    local kwargs[]
    local array shape[1]
    shape[0] = SC_NPOINTS

    kwargs["shape"] = python_repr(shape)
    kwargs["dtype"] = python_repr("?")
    kwargs["monitor"] = python_repr(cnt_mne(_SKIPMODE["counter"]))
    kwargs["threshold"] = python_repr(_SKIPMODE["threshold"])
    client_set_scan_env("scalar_data/masked", "Signal", kwargs)
}'


def _skipmode_precount '{
    tcount(_SKIPMODE["precount"])
    sleep(.2)
    getcounts
    if(S[_SKIPMODE["counter"]] < _SKIPMODE["threshold"]){
        COUNT_TIME = 0
    }
}'


def _skipmode_getcounts '{
    if (SC_DATA_ACTIVE) {
        _skipmode_client_report_data()
    }
}'

def _skipmode_client_report_data() '{
    local val

    val = S[_SKIPMODE["counter"]] < _SKIPMODE["threshold"]
    client_set_data("scalar_data/masked", val)
}'
