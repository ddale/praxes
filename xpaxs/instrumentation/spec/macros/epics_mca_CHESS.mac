#===============================================================================
#                  SPEC macros for MCA acquisition via EPICS
#===============================================================================
#
# Description: Macros to setup and control multiple epics MCAs, allow users to
#              save mca spectra and the configured MCA ROIS into spec file.
#
# Written by: Xuesong Jiao
#
# Modified by: Darren Dale
#
# User macros: setup_mca -> interface to configure multiple epics MCAs in spec.
#              setup_mca (no paramerter) -> interactive mode
#              setup_mca mnemonic name PV -> quiet mode
#
#              mcasmode -> turn on mca data collection and save spectra to
#                          device files
#
#              show_mca -> display the configured epics MCAs nicely.
#              mca_rois -> to automatically check the created ROIS in each MCA
#                          and display their parameters.
#              save_rois -> to turn on/off the feature of saving MCA_ROIS(defined
#                           in roi_pv[], and filled when mca_rois is called)
#              rm_mca -> remove one or all configured MCAs,also remove all rois
#                        related to that MCA
#              rm_roi -> remove one/all configured MCA ROIS.Can also rmove all
#                        rois related to one MCA by calling rm_roi mca_nme
#
#===============================================================================

def _aa_length(aname) '{
  local field n
  if( !( (whatis("aname")>>16)&0x100 ) ) {
    print "Not an associative array."
    exit
  }
  for (field in aname) n++
  return n
}'

def strjoin(s, delimiter) '{
   local tmp[] i new n
   new = ""
   split(s, tmp, delimiter)
   n = _aa_length(tmp)
   for (i=0;i<n;i++) new = sprintf("%s%s", new,tmp[i])
   return new
} '

#===============================================================================
# global variables defined here
#===============================================================================

#MCA arrays

global MCA_NAME[] MCA_PV[] ROI_PV[] DXP_PV[] MCA_USES_DXP[] MCA_SMODE[]
global MCA_MONITOR_EFFICIENCY

#===============================================================================
# user macros defined here
#===============================================================================

#-------------------------------------------------------------------------------
# setup_mca-> configure epics MCAs and create global arrays for each MCA
#-------------------------------------------------------------------------------

def setup_mca '{
    if ($# == 0) {
        p "Current MCA Setup:\n"
        show_mca
        while(yesno("\nConfigure a new MCA?", "0")) {
            local foo nme A_name name pv dxp_pv smode

            nme = getval("MCA mnemonic:", "vortex1")
            if (nme == "") {
                continue
            }
            name = getval("MCA name:", nme)
            pv = getval("EPICS MCA PV:", "dxpSaturn4:mca1")
            smode = yesno("Record full spectra for this MCA?", "0")
            dxp_pv = getval("EPICS DXP PV (if used):", "dxpSaturn4:dxp1")

            # defer populating these arrays until all input has been collected
            # in case user escapes and leaves an mca half configured
            MCA_NAME[nme] = name
            MCA_PV[nme] = pv
            MCA_SMODE[nme] = smode
            MCA_USES_DXP[nme] = dxp_pv?1:0
            if (dxp_pv) {
                DXP_PV[nme] = dxp_pv
            }

            foo = epics_par(sprintf("%s.VAL",MCA_PV[nme]), "count")
            printf("Found MCA with %i channels\n", foo)
            foo = epics_get(sprintf("%s.NUSE", MCA_PV[nme]))
            printf("Reading %i channels of MCA\n", foo)
            A_name = sprintf("mcadat_%s", nme)
            array @A_name[2][foo]
            EPICS_MCAS++
            printf("Created data array %s for MCA %s\n", A_name, nme)
        }
        set_mca_monitor_efficiency MCA_MONITOR_EFFICIENCY
        p "New MCA Setup:"
        show_mca
        if (yesno("\nDo you want to setup the ROIS now", "0")) {
            mca_rois
            printf("\n\nOnce you reconfigure the MCA ROIS externally(i.e. in MEDM),\
                 \nuse mca_rois to refresh, or you may not save the new ROIS.")
        }
    } else {
        local nme A_name foo
        nme = "$1"
        MCA_NAME[nme] = "$2"
        MCA_PV[nme] =  "$3"
        foo =  epics_get(sprintf("%s.NUSE", MCA_PV[nme]))
        A_name =  sprintf("mcadat_%s", nme)
        array @A_name[2][foo]
        mca_rois
        p "\n"
        show_mca
    }

    if (_aa_length(MCA_PV) > 0) {
        cdef("user_Fheader", "_mca_specfile_Fheader();", "epics_mca", 0x10)
        cdef("user_postscan_head", "_mca_set_env();", "epics_mca")
        cdef("user_precount", "_mca_startcount();", "epics_mca", 0x20)
        cdef("user_getcounts", "_mca_getcounts();", "epics_mca", 0x10)
        cdef("user_scan_loop", "_mca_report_counts();", "epics_mca", 0x10)
    }
}'

#-------------------------------------------------------------------------------
# rm_mca-> i.e. rm_mca all( clear all configure MCAs)
#               rm_mca mca1( clear MCA with mnemonic name mca1)
#-------------------------------------------------------------------------------

def rm_mca '{
    if ($# != 1) {
        print "Usage: rm_mca mne or rm_mca all.\n"
        exit
    }
    if ("$1" == "all") {
        local i
        for (i in MCA_PV) {
            rm_roi all
            A_name = sprintf("mcadat_%s",i)
            unglobal @A_name
            delete MCA_PV[i] MCA_NAME[i] DXP_PV[i] MCA_USES_DXP[i] MCA_SMODE[i]
            printf("Deleted MCA %s and data array %s\n",i,A_name)
        }
    } else {
        if (MCA_PV["$1"] == 0) {
            printf("Invalid MCA mnemonic %s\n","$1")
            exit
        }
        rm_roi "$1"
        A_name = sprintf("mcadat_%s","$1")
        unglobal @A_name
        delete MCA_PV["$1"] MCA_NAME["$1"] DXP_PV["$1"] MCA_USES_DXP["$1"]
        delete MCA_SMODE["$1"]
        printf("Deleted MCA %s and data array %s\n","$1",A_name)
    }

    if (_aa_length(MCA_PV) == 0) {
        cdef("", "", "epics_mca", "delete")
    }
}'

#-------------------------------------------------------------------------------
# show_mca-> display configured MCAs and their configuration
#-------------------------------------------------------------------------------

def show_mca '{
    if (unset("MCA_PV")) {
        global MCA_NAME[] MCA_PV[] MCA_SMODE[]
    }
    if (_aa_length(MCA_PV) == 0) {
        print "No MCA defined."
    } else {
        local tch uch A_name i

        printf("\n%8.8s %15.15s %16.16s %10.10s %8.8s %15.15s %9.9s",\
               "Mne", "Name", "EPICS_PV", "Total_Chs", "Use_Chs", "Data_array",\
               "Spectra")

        for (i in MCA_PV) {
            tch = epics_par(sprintf("%s.VAL", MCA_PV[i]), "count")
            uch = epics_get(sprintf("%s.NUSE", MCA_PV[i]))
            A_name = sprintf("mcadat_%s", i)
            printf("\n%8.8s %15.15s %16.16s %10i %8i %15.15s %9.9s",\
                i, MCA_NAME[i], MCA_PV[i], tch, uch, A_name, \
                MCA_SMODE[i]?"enabled":"disabled")
        }
        printf("\n")
    }
}'

#-------------------------------------------------------------------------------
# mcasmode->Set the scan mode for epics interface
#-------------------------------------------------------------------------------

def mcasmode '{
    local i
    if ($# == 0) {
        for (i in MCA_NAME) {
            local msg
            msg = sprintf("Record spectra for mca: %s", MCA_NAME[i])
            MCA_SMODE[i] = yesno(msg, "0")
        }
    } else if (("$1" == 0) || ("$1" == 1)) {
        for (i in MCA_NAME) {
            MCA_SMODE[i] = $1
        }
    } else {
        if (("$2" != 1) && ("$2" != 0)) {
            eprint "usage: mcasmode [0/1/[%mne% 0/1]]"
            exit
        }
        if ($# < 2) {
            local msg
            msg = sprintf("Record spectra for mca: %s", MCA_NAME[$1])
            MCA_SMODE[i] = yesno(msg, "0")
        } else {
            MCA_SMODE["$1"] = $2
        }
    }
}'

#-------------------------------------------------------------------------------
# rm_roi-> rm_roi mca1R1 ( to delete roi with mnemonic mca1R1)
#          rm_roi mca1  ( to delete all rois related to mca1)
#          rm_roi all   ( to clear all rois)
#-------------------------------------------------------------------------------

def rm_roi '{
    if ($# != 1) {
        print "Usage: rm_roi mne or rm_roi all or rm_roi mca_mne.\n"
        exit
    }
    if ("$1" == "all") {
        for (i in ROI_PV) {
            delete ROI_PV[i]
            printf("\nDeleted MCA  ROI %s \n",i)
        }
    } else {
        if (MCA_PV["$1"]!=0) {
            local foo
            for (i in ROI_PV) {
                foo = substr(i,0,length("$1"))
                if(foo == "$1") {
                    delete ROI_PV[i]
                    printf("Deleted MCA ROI %s related to %s\n",i,"$1")
                }
            }
        } else {
            if (ROI_PV["$1"] == 0) {
                printf("Invalid ROI mnemonic %s\n","$1")
                exit
            }
            delete ROI_PV["$1"]
            printf("\nDeleted MCA ROI %s \n", "$1")
        }
    }
}'

def set_mca_monitor_efficiency '{
    MCA_MONITOR_EFFICIENCY = $1
    while (MCA_MONITOR_EFFICIENCY <= 0) {
        MCA_MONITOR_EFFICIENCY = getval("enter monitor efficiency > 0", "1")
    }
}'

#===============================================================================
# internal macros defined here
#===============================================================================

def _mca_startcount() '{
    local i
    for (i in MCA_PV) {
        # Stop is needed in case counting to monitor counts was aborted
        # in which case the mca is waiting to receive a stop signal
        epics_put(sprintf(\"%s.STOP\", MCA_PV[i]), 1)
        # erase is necessary in case we are using skip mode, we wont count
        # in that case and we want an empty array
        epics_put(sprintf(\"%s.ERAS\", MCA_PV[i]), 1)
    }
    if (COUNT_TIME != 0) {
        if (COUNT_TIME > 0) {
            for (i in MCA_PV) {
                epics_put(sprintf(\"%s.PRTM\", MCA_PV[i]), COUNT_TIME)
            }
        } else {
            for (i in MCA_PV) {
                epics_put(sprintf(\"%s.PRTM\", MCA_PV[i]), 0)
            }
        }
        for (i in MCA_PV) {
            epics_put(sprintf(\"%s.STRT\", MCA_PV[i]), 1)
        }
    }
}'

global EPICS_OVERHEAD
# This value should be tweaked so monitor counts integrates properly
# need to compare spec's seconds with mca real time
EPICS_OVERHEAD = 0.047

def _mca_getcounts() '{
    local i
    if (COUNT_TIME < 0) {
        sleep(EPICS_OVERHEAD)
        for(i in MCA_PV) {
            epics_put(sprintf(\"%s.STOP\",MCA_PV[i]), 1)
        }
    } else {
        sleep(0.1)
    }

    for (i in MCA_PV) {
        local _oo _ss _qq A_name pvlist[]

        while (epics_get(sprintf("%s.ACQG", MCA_PV[i]), "short")) {
            sleep(0.01)
        }
        _oo = epics_get(sprintf("%s.CALO", MCA_PV[i]))
        _ss = epics_get(sprintf("%s.CALS", MCA_PV[i]))
        _qq = epics_get(sprintf("%s.CALQ", MCA_PV[i]))
        if (MCA_SMODE[i]) {
            A_name = sprintf("mcadat_%s", i)
            array_op("fill", @A_name[0], 1)
            @A_name[0] = _oo + @A_name[0] * (_ss + _qq * @A_name[0])
            @A_name[1] = epics_get(MCA_PV[i])
        }
    }
    for (i in DXP_PV) {
        epics_put(sprintf(\"%s.READ_PARAMS\", DXP_PV[i]), 1)
    }
}'

#----------------------------------------------------------------------
# Save Data for each point in the same spec file with the proper format
# need to move most print statements to mca_Fheader
#----------------------------------------------------------------------

def _mca_report_counts() '{
    local mne

    for(mne in MCA_PV) {
        local device_file real live icr ocr dead

        device_file = _mca_get_device_file(mne)
        on(device_file)
        offt

        if (MCA_USES_DXP[mne]) {
             icr = epics_get(sprintf("%s.ICR", DXP_PV[mne]))
             ocr = epics_get(sprintf("%s.OCR", DXP_PV[mne]))
        } else {
            icr = 1
            ocr = 1
        }

        real = epics_get(sprintf("%s.ERTM", MCA_PV[mne]))
        live = epics_get(sprintf("%s.ELTM", MCA_PV[mne]))

        # dxp realtime does not gate properly, lets try to correct it:
        real = real > 1.1*S[sec]? S[sec]:real

        # lets calculate the first-order deadtime %:
        dead = icr * real
        if (dead != 0) {
            dead = 100 * (1 - ocr * live / dead)
        }

        printf("%g %g %g %g %g %g\n", S[MON], icr, ocr, real, live, dead)

        if (MCA_SMODE[mne]) {
            printf("@%s ", mne)
            if (MCA_SMODE[mne]) {
                A_name = sprintf("mcadat_%s", mne)
                # scaling handles bad syncing between spec and epics:
                array_dump(@A_name[1]*S[sec]/real, "%25C")
            }
        }

        close(device_file)
        ont

        if (SC_DATA_ACTIVE) {
            _mca_client_report(mne, A_name, real, live, icr, ocr, dead)
        }
    }
}'

def _mca_client_report(mne, A_name, real, live, icr, ocr, dead) '{
    if (MCA_SMODE[mne]) {
        client_set_data(sprintf("%s/counts", mne), @A_name[1]*S[sec]/real)
    }
    if (MCA_USES_DXP[mne]) {
        client_set_data(sprintf("%s/icr", mne), icr)
        client_set_data(sprintf("%s/ocr", mne), ocr)
    }
    client_set_data(sprintf("%s/real", mne), real)
    client_set_data(sprintf("%s/live", mne), live)
    client_set_data(sprintf("%s/dead_time", mne), dead)
    client_set_data(sprintf("%s/%s", mne, cnt_name(MON)), S[MON])
}'

#-------------------------------------------------------------------------------
# _mca_get_rois-> read available ROIs from each MCA
#-------------------------------------------------------------------------------

def _mca_get_rois() '{
    global MAXROIN
    MAXROIN = 32
    if(_aa_length(MCA_PV) == 0) {
        print "No MCA defined. Please define MCA first."
        exit
    }
    for (i in ROI_PV) {
        delete ROI_PV[i]
    }
    for (i in MCA_PV) {
        local rname rlch rhch A_name flag mne

        flag = 0
        printf("\nCurrent configured ROI for %s:", i)
        for(j=0; j<MAXROIN; j++) {
            rname = epics_get(sprintf("%s.R%iNM", MCA_PV[i], j))
            rlch = epics_get(sprintf("%s.R%iLO", MCA_PV[i], j))
            rhch = epics_get(sprintf("%s.R%iHI", MCA_PV[i], j))
            if ((rname != " ") & (rlch != -1)) {
                mne = sprintf("%sR%i", i, j)
                printf("\nmne: %s |pv: %s.R%i  |name:%s  |low: %i  |high: %i",\
                       mne, MCA_PV[i], j, rname, rlch, rhch)
                ROI_PV[mne] = sprintf("%s.R%i", MCA_PV[i], j)
                flag = 1
            }
        }
        if (!flag) {
            print "\nNo ROIS configured!"
        }
    }
}'

#-------------------------------------------------------------------------------
# _mca_save_rois-> save_rois on/off to save/not save ROI data in spec file
#-------------------------------------------------------------------------------

def _mca_save_rois() '{
    if ($# != 1) {
        print "Usage: save_rois on/off"
        exit
    }
    if ("$1" == "on") {
        u_column_clear("mcaroi")

        local n rname cmd i j
        local tmp[]
        local header_str lch hch

        header_str = ""
        if (_aa_length(ROI_PV) == 0) {
            p "\nNo roi configured. Please run mca_rois.\n"
            exit
        }
        for (i in ROI_PV) {
            rname = epics_get(sprintf("%sNM", ROI_PV[i]))
            rname = strjoin(rname, " ")
            rname = sprintf("%s(%s)", rname, i)
            cmd = sprintf("epics_get(\"%s\")", ROI_PV[i])
            u_column_add(rname, "%s", cmd, "mcaroi")
            lch = epics_get(sprintf("%sLO", ROI_PV[i]))
            hch = epics_get(sprintf("%sHI", ROI_PV[i]))
            header_str = sprintf("%s#@ROI  %s %d %d\n", header_str, rname, lch, hch)
            for (j in MCA_PV) {
                if ((index(i,j) == 1) && !(tmp[j])) {
                    tmp[j] = MCA_PV[j]
                    break
                }
            }
        }

        for (j in tmp) {
            if (MCA_USES_DXP[j]) {
                rname = sprintf("ICR%s", j)
                cmd = sprintf("epics_get(\"%s.ICR\")", DXP_PV[j])
                u_column_add(rname, "%.8g", cmd, "mcaroi")
                rname = sprintf("OCR%s", j)
                cmd = sprintf("epics_get(\"%s.OCR\")", DXP_PV[j])
                u_column_add(rname, "%.8g", cmd, "mcaroi")
            } else {
                rname = sprintf("Rt%s", j)
                cmd = sprintf("epics_get(\"%s.ERTM\")", MCA_PV[j])
                u_column_add(rname,"%.8g", cmd, "mcaroi")
                rname = sprintf("Lt%s", j)
                cmd = sprintf("epics_get(\"%s.ELTM\")", MCA_PV[j])
                u_column_add(rname, "%.8g", cmd, "mcaroi")
            }
        }
        header_str = sprintf("printf(\"%s\");\n", header_str)
        cdef("user_Fheader", header_str, "mcaroi", "0x20")
        print "\n"
        u_column_show
        mca_on
    }
    if ("$1" == "off") {
        u_column_clear("mcaroi")
        cdef("user_Fheader", "", "mcaroi", "delete")
        mca_off
    }
}'

#----------------------------------------------------------------------
# Format the Header for a specfile
#----------------------------------------------------------------------

def _mca_specfile_Fheader() '{
    local mne

    for (mne in MCA_NAME) {
        printf("#U Saving data for mca %s in %s.scan%03d.%s.mca\n", \
            mne, DATAFILE, SCAN_N, mne)
    }
    printf("#U monitor = %s\n", cnt_name(MON))
}'


def _mca_set_env() '{
    local uch device_file kwargs[] mne _oo _ss _qq

    for (mne in MCA_PV) {
        device_file = _mca_get_device_file(mne)

        if (NPTS == 0) {
            constant EPOCH time()
            fprintf(device_file, "#F %s\n", device_file)
            fprintf(device_file, "#E %d\n", EPOCH)
            fprintf(device_file, "#D %s\n", date())
            fprintf(device_file, "#C %s  User= %s\n", TITLE, USER)
        }

        fprintf(device_file, "\n#S %d  %s\n#D %s\n", SCAN_N, HEADING, DATE)

        if(_ctime<0) fprintf(device_file, "#M %g (%s)\n", -_ctime, cnt_name(MON))
        else fprintf(device_file, "#T %g (%s)\n", _ctime, cnt_name(sec))
        fprintf(device_file, "#U monitor = %s\n", cnt_name(MON))
        fprintf(device_file, "#U monitor efficiency = %g\n", MCA_MONITOR_EFFICIENCY)

        uch = epics_get(sprintf("%s.NUSE", MCA_PV[mne]))

        fprintf(device_file, "#U EPICS mca: %s(%s)\n", mne, MCA_PV[mne])
        if (MCA_SMODE[mne]) {
            _oo = epics_get(sprintf("%s.CALO", MCA_PV[mne]))
            _ss = epics_get(sprintf("%s.CALS", MCA_PV[mne]))
            _qq = epics_get(sprintf("%s.CALQ", MCA_PV[mne]))
            fprintf(device_file, "#@MCA %25C\n")
            fprintf(device_file, "#@CHANN %i 0 %i 1\n", uch, uch-1)
            fprintf(device_file, "#@CALIB %g %g %g \n", _oo, _ss, _qq)
        }
        fprintf(device_file, "#N 6\n")
        fprintf(device_file, \
            sprintf("#L %s icr  ocr  real  live  dead_time\n", cnt_name(MON)))
        close(device_file)

        if (SC_DATA_ACTIVE) {
            _mca_client_set_env(mne, uch, _oo, _ss, _qq)
        }
    }
}'

def _mca_client_set_env(mne, uch, _oo, _ss, _qq) '{
    local i kwargs[]

    local array cal[3]
    cal[0] = _oo; cal[0] = _ss; cal[0] = _qq
    kwargs["calibration"] = python_repr(python_repr(cal))
    kwargs["monitor"] = python_repr(cnt_name(MON))
    client_set_scan_env(mne, "MultiChannelAnalyzer", kwargs)

    for (i in kwargs) delete kwargs[i]
    local array shape[1]
    shape[0] = SC_NPOINTS
    kwargs["shape"] = python_repr(shape)
    kwargs["dtype"] = python_repr("f")
    kwargs["efficiency"] = python_repr(MCA_MONITOR_EFFICIENCY? MCA_MONITOR_EFFICIENCY:1)
    id = sprintf("%s/%s", mne, cnt_name(MON))
    client_set_scan_env(id, "Signal", kwargs)

    if (MCA_SMODE[mne]) {
        for (i in kwargs) delete kwargs[i]
        local array shape[2]
        shape[0] = SC_NPOINTS; shape[1] = uch
        kwargs["shape"] = python_repr(shape)
        kwargs["dtype"] = python_repr("f")
        id = sprintf("%s/counts", mne)
        client_set_scan_env(id, "McaSpectrum", kwargs)

        for (i in kwargs) delete kwargs[i]
        local array mca_channels[uch]
        array_op("fill", mca_channels, 1, 1)
        kwargs["data"] = python_repr(mca_channels)
        id = sprintf("%s/channels", mne)
        client_set_scan_env(id, "Dataset", kwargs)
    }

    if (MCA_USES_DXP[mne]) {
        local units[] type dset
        local array shape[1]
        shape[0] = SC_NPOINTS

        units["icr"] = "s"
        units["ocr"] = "s"
        units["real"] = "s"
        units["live"] = "s"
        units["dead_time"] = "percent"

        for (dset in units) {
            for (i in kwargs) delete kwargs[i]
            kwargs["shape"] = python_repr(shape)
            kwargs["dtype"] = python_repr("f")
            kwargs["units"] = python_repr(units[dset])
            if (dset == "dead_time") {
                type = "DeadTime"
                kwargs["dead_time_format"] = python_repr(units[dset])
            } else {
                type = "Dataset"
            }
            id = sprintf("%s/%s", mne, dset)
            client_set_scan_env(id, type, kwargs)
        }
    }
}'


def _mca_get_device_file(mne) '{
    if (!index(DATAFILE,"/") && file_info(DATA_DIR,"-d")) {
        return(sprintf("%s%s.scan%i.%s.mca", DATA_DIR, DATAFILE, SCAN_N, mne))
    } else {
        return(sprintf("%s.scan%i.%s.mca", DATAFILE, SCAN_N, mne))
    }
}'
