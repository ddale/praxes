
# All globals to which SpecScan will connect need to be created before the
# SpecScan is instantiated. DO NOT USE ASSOCIATIVE ARRAYS TO REPORT DATA!
# They are not broadcast at the time they are set, but polled by SpecClient
# at a later time. This means their values may have changed before SpecClient
# could read them.

def _clientutils_on '{
    global _SC_NEWSCAN
    _SC_NEWSCAN = 0

    cdef("user_prescan_head", "_client_setscanenv;", "_clientutils_")
    cdef("user_scan_tail", "_SC_NEWSCAN = 0;", "_clientutils_")
}'


def _clientutils_off '{
    if (_SC_PLOT_ACTIVE == 0 && _SC_DATA_ACTIVE == 0){
        unglobal _SC_NEWSCAN
        cdef("", "", "_clientutils_", "delete")
    }
}'


def _client_setscanenv '{
    local scan_env column_names

    scan_env = ""
    # define reserved parameters for plotting:
    scan_env = sprintf("%stype=%s\t", scan_env, _stype)
    scan_env = sprintf("%stitle=Scan %d\t", scan_env, SCAN_N+1)
    scan_env = sprintf("%sxlabel=%s\t", scan_env, X_L)
    scan_env = sprintf("%sylabel=%s\t", scan_env, cnt_mne(DET))
    scan_env = sprintf("%snb_motors=%d\t", scan_env, PLOT_MOTS)
    scan_env = sprintf("%smotor=%s\t", scan_env, motor_mne(_m[0]))
    scan_env = sprintf("%scounter=%s\t", scan_env, cnt_mne(DET))

    # define additional parameters for data storage:
    scan_env = sprintf("%sfileName=%s\t", scan_env, DATAFILE)
    scan_env = sprintf("%sscanCommand=%s\t", scan_env, HEADING)
    scan_env = sprintf("%sscanNumber=%d\t", scan_env, SCAN_N+1)
    scan_env = sprintf("%sscanLines=%d\t", scan_env, (_stype&8? _n1*_n2:_n1))
    scan_env = sprintf("%smonitor=%s\t", scan_env, cnt_mne(MON))
    column_names = "i"
    for (i=0;i<_nm;i++) {
        column_names = sprintf("%s %s", column_names, motor_mne(_m[i]))
    }
    column_names = sprintf("%s epoch", column_names)
    for (i=0;i<COUNTERS;i++) {
        column_names = sprintf("%s %s", column_names, cnt_mne(i))
    }
    scan_env = sprintf("%scolumnNames=%s\t", scan_env, column_names)
    if (SKIPMODE_COUNTER) {
        scan_env = sprintf("%sskipmode=%s %g\t", scan_env, \
                           cnt_mne(SKIPMODE_COUNTER), SKIPMODE_THRESHOLD)
    }
    motor_positions = ""
    for (i=0;i<MOTORS;i++){
        motor_positions = sprintf("%s%s=%g ", motor_positions, motor_mne(i), \
                                  A[i])
    }
    scan_env = sprintf("%smotorPositions=%s\t", scan_env, motor_positions)
    if (MCA_CHAN > 0) {
        local mca_channels
        mca_channels = ""
        mca_energy = ""
        for(i = 0; i < MCA_CHAN; i++){
            mca_channels = sprintf("%s%g,", mca_channels, MCA_DATA[i][0])
            mca_energy = sprintf("%s%g,", mca_energy, MCA_DATA_FL[i][0])
        }
        # This could be extended to support muliple MCAs
        scan_env = sprintf("%smcas=%s\t", scan_env, "MCA")
        scan_env = sprintf("%smcaChannels_MCA=%s\t", scan_env, mca_channels)
        scan_env = sprintf("%smcaEnergy_MCA=%s\t", scan_env, mca_energy)
    }

    _SC_NEWSCAN = scan_env
}'


def clientploton '{
    _clientutils_on

    global _SC_OLDX _SC_NEWPLOTDATA _SC_PLOT_ACTIVE
    _SC_PLOT_ACTIVE = 1

    _SC_OLDX=0

    if (length(plotlist()) == 0)  {
        tty_cntl("md");
        printf("\n- NO COUNTER SELECTED. Run plotselect\n");
        tty_cntl("me")
    }

    cdef("user_scan_plot", "_client_updateplotdata;", "_client_plot_")
}'


def clientplotoff '{
    unglobal _SC_OLDX _SC_NEWPLOTDATA _SC_PLOT_ACTIVE
    _clientutils_off

    cdef("", "", "_client_plot_", "delete")
}'


def _client_updateplotdata '{
    local x d i n plot_data
    global _SC_OLDX

    x = SCAN_D[NPTS][0]

    if (_stype >= 257) {
        d = 1
    } else {
        d = x - _SC_OLDX
    }

    if (d > 0) {
        _SC_OLDX = x

        plot_data = ""
        plot_data = sprintf("%si=%d\t", plot_data, NPTS)
        plot_data = sprintf("%sx=%g\t", plot_data, x)

        n = _stype&8? _g1:NPTS
        for (i=PLOT_MOTS; i<(PLOT_CNTRS+PLOT_MOTS); i++) {
            plot_data = sprintf("%s%s=%g\t", plot_data, PLOT_MNE[i], \
                                SCAN_D[n][i])
        }

        _SC_NEWPLOTDATA = plot_data
    }
}'


def clientdataon '{
    global _SC_NEWSCANDATA _SC_DATA_ACTIVE
    _clientutils_on

    _SC_DATA_ACTIVE = 1

    cdef("user_scan_loop", "_client_updatescandata;", "_client_data_")
}'


def clientdataoff '{
    unglobal _SC_NEWSCANDATA _SC_DATA_ACTIVE
    _clientutils_off

    cdef("", "", "_client_data_", "delete")
}'


def _client_updatescandata '{
    local i scan_data

    scan_data = ""
    scan_data = sprintf("%si=%d\t", scan_data, NPTS)

    for (i=0;i<_nm;i++) {
        scan_data = sprintf("%s%s=%g\t", scan_data, motor_mne(_m[i]), A[_m[i]])
    }

    scan_data = sprintf("%sepoch=%f\t", scan_data, time())

    for (i=0;i<COUNTERS;i++) {
        scan_data = sprintf("%s%s=%g\t", scan_data, cnt_mne(i), S[i])
    }

    if (MCA_CHAN > 0) {
        local mca_counts
        mca_counts = ""
        for(i = 0; i < MCA_CHAN; i++){
            mca_counts = sprintf("%s%g,", mca_counts, MCA_DATA[i][1])
        }
        scan_data = sprintf("%sMCA=%s\t", scan_data, mca_counts)
    }

    _SC_NEWSCANDATA = scan_data
}'
