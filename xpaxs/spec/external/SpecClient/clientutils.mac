#$Id: clientutils.mac,v 1.5 2006/09/25 15:24:55 guijarro Exp $

# All globals to which SpecScan will connect need to be created before
# the SpecScan is instantiated.

def _clientutils_on '{
    global _SC_NEWSCAN _SC_SCANENV
    _SC_NEWSCAN = 0

    cdef("user_prescan_head", "_client_setscanenv;", "_clientutils_")
    cdef("user_scan_tail", "_SC_NEWSCAN = 0;", "_clientutils_")
}'


def _clientutils_off '{
    if (_SC_PLOT_ACTIVE == 0 && _SC_DATA_ACTIVE == 0){
        unglobal _SC_ACTIVE _SC_NEWSCAN _SC_SCANENV
        cdef("", "", "_clientutils_", "delete")
    }
}'


def _client_setscanenv '{
    local scan_env column_names

    # define reserved parameters for plotting:
    scan_env["type"] = _stype
    scan_env["title"] = sprintf("Scan %d", SCAN_N+1)
    scan_env["xlabel"] = X_L
    scan_env["ylabel"] = cnt_mne(DET)
    scan_env["nb_motors"] = PLOT_MOTS
    scan_env["motor"] = motor_mne(_m[0])
    scan_env["counter"] = cnt_mne(DET)

    # define additional parameters for data storage:
    scan_env["fileName"] = DATAFILE
    scan_env["command"] = HEADING
    scan_env["scanNumber"] = sprintf("%d", SCAN_N+1)
    scan_env["monitor"] = cnt_mne(MON)
    column_names = ""
    for (i=0;i<_nm;i++) {
        column_names = sprintf("%s %s", column_names, motor_mne(_m[i]))
    }
    column_names = sprintf("%s epoch", column_names)
    for (i=0;i<COUNTERS;i++) {
        column_names = sprintf("%s %s", column_names, cnt_mne(i))
    }
    scan_env["columnNames"] = column_names
    if (MCA_CHAN > 0) {
        local mca_channels
        mca_channels = ""
        for(i = 0; i < MCA_CHAN; i++){
            mca_channels = sprintf("%s%g,", mca_channels, MCA_DATA[i][0])
        }
        scan_env["mcaChannels"] = mca_channels
    }

    _SC_SCANENV = scan_env
    _SC_NEWSCAN = 1
}'


def clientploton '{
    _clientutils_on

    global _SC_OLDX _SC_NEWPLOTDATA _SC_PLOTDATA _SC_PLOT_ACTIVE
    _SC_PLOT_ACTIVE = 1
    _SC_NEWPLOTDATA = -1

    _SC_OLDX=0

    if (length(plotlist()) == 0)  {
        tty_cntl("md");
        printf("\n- NO COUNTER SELECTED. Run plotselect\n");
        tty_cntl("me")
    }

    cdef("user_scan_plot", "_client_updateplotdata;", "_client_plot_")
    cdef("user_scan_tail", "_SC_NEWPLOTDATA = -1;", "_client_plot_")
}'


def clientplotoff '{
    _SC_PLOT_ACTIVE = 0
    _clientutils_off

    cdef("", "", "_client_plot_", "delete")
    unglobal _SC_OLDX _SC_NEWPLOTDATA _SC_PLOTDATA _SC_PLOT_ACTIVE
}'


def _client_updateplotdata '{
    local x d i n plot_data
    global _SC_OLDX

    x = SCAN_D[NPTS][0]

    if (_stype >= 257) {
        d = 1
    } else {
        d = x - _SC_OLDX
    }

    if (d > 0) {
        _SC_OLDX = x

        plot_data["i"] = sprintf("%d", NPTS)
        plot_data["x"] = sprintf("%g", x)

        n = _stype&8? _g1:NPTS
        for (i=PLOT_MOTS; i<(PLOT_CNTRS+PLOT_MOTS); i++) {
            plot_data[PLOT_MNE[i]] = sprintf("%g", SCAN_D[n][i])
        }

        _SC_PLOTDATA = plot_data
        _SC_NEWPLOTDATA = NPTS
    }
}'


def clientdataon '{
    global _SC_NEWSCANDATA _SC_SCANDATA _SC_DATA_ACTIVE

    _clientutils_on

    _SC_DATA_ACTIVE = 1
    _SC_NEWSCANDATA = -1

    cdef("user_scan_loop", "_client_updatescandata;", "_client_data_")
    cdef("user_scan_tail", "_SC_NEWSCANDATA = -1;", "_client_data_")
}'


def clientdataoff '{
    _SC_DATA_ACTIVE = 0
    _clientutils_off

    cdef("", "", "_client_data_", "delete")
    unglobal _SC_NEWSCANDATA _SC_SCANDATA _SC_DATA_ACTIVE
}'


def _client_updatescandata '{
    local i scan_data

    scan_data["i"] = sprintf("%d", NPTS)

    for (i=0;i<_nm;i++) {
        scan_data[motor_mne(_m[i])] = sprintf("%g", A[_m[i]])
    }

    scan_data["epoch"] = sprintf("%f", time())

    for (i=0;i<COUNTERS;i++) {
        scan_data[cnt_mne(i)] = sprintf("%g", S[i])
    }

    if (MCA_CHAN > 0) {
        local mca_counts
        mca_counts = ""
        for(i = 0; i < MCA_CHAN; i++){
            mca_counts = sprintf("%s%g,", mca_counts, MCA_DATA[i][1])
        }
        scan_data["mcaCounts"] = mca_counts
    }

    _SC_SCANDATA = scan_data
    _SC_NEWSCANDATA = NPTS
}'
